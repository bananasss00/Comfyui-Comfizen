<Application x:Class="Comfizen.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Comfizen"
             xmlns:global="clr-namespace:"
             Startup="Application_Startup">
    <Application.Resources>
        
        <!-- Converters -->
        <local:ToTitleCaseConverter x:Key="ToTitleCaseConverter"/>
        <local:IsInpaintViewModelConverter x:Key="IsInpaintViewModelConverter"/>
        <local:TaskCountToVisibilityConverter x:Key="TaskCountToVisibilityConverter" />
        <local:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <global:IsHeaderConverter x:Key="IsHeaderConverter"/>
        <local:StringListToStringConverter x:Key="StringListConverter"/>
        <local:StringToIsNotNullOrEmptyConverter x:Key="StringToIsNotNullOrEmptyConverter"/>
        <local:FileNameTrimmerConverter x:Key="FileNameTrimmerConverter"/>
        <local:EnumToBooleanConverter x:Key="EnumToBooleanConverter"/>
        <local:MultiSelectCountToVisibilityConverter x:Key="MultiSelectCountToVisibilityConverter"/>
        <local:BoolToGridLengthConverter x:Key="BoolToGridLengthConverter"/>
        <local:CultureInfoToNameConverter x:Key="CultureInfoToNameConverter"/>
        <local:MultiBindingStringFormatConverter x:Key="MultiBindingStringFormatConverter"/>
        <local:HexToBrushConverter x:Key="HexToBrushConverter"/>
        <local:PriorityColorToBrushConverter x:Key="PriorityColorToBrushConverter"/>
        <local:MultiValueToArrayConverter x:Key="MultiValueToArrayConverter"/>

        <!-- Color Palette -->
        <SolidColorBrush x:Key="PrimaryBackground" Color="#FF2D2D30"/>
        <SolidColorBrush x:Key="SecondaryBackground" Color="#FF3F3F46"/>
        <SolidColorBrush x:Key="TertiaryBackground" Color="#FF52525B"/>
        <SolidColorBrush x:Key="PrimaryAccentBrush" Color="#FF007ACC"/>
        <SolidColorBrush x:Key="SuccessBrush" Color="#FF2ECC71"/>
        <SolidColorBrush x:Key="ErrorBrush" Color="#FFE74C3C"/>
        <SolidColorBrush x:Key="TextBrush" Color="#FFE0E0E0"/>
        <SolidColorBrush x:Key="TextSecondaryBrush" Color="#FFA0A0A0"/>
        
        
        <!-- Style for Icon ToggleButtons -->
        <Style x:Key="IconToggleButton" TargetType="ToggleButton">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="Width" Value="30"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border Background="{TemplateBinding Background}" CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <TextBlock Text="{TemplateBinding Content}" FontFamily="Segoe MDL2 Assets" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{TemplateBinding Foreground}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource TertiaryBackground}"/>
                </Trigger>
                <!-- Trigger for active (checked) state -->
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="{StaticResource PrimaryAccentBrush}"/>
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{StaticResource TextSecondaryBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!-- Style for ComboBox ToggleButtons -->
        <Style x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
            <Setter Property="Focusable" Value="False"/> 
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border x:Name="templateRoot" 
                                Background="Transparent" 
                                Width="25" 
                                SnapsToDevicePixels="true">
                            <Path x:Name="arrow" 
                                  Data="F1 M 0,0 L 2.5,2.5 L 5,0 Z" 
                                  Fill="{StaticResource TextBrush}" 
                                  HorizontalAlignment="Center" 
                                  VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="arrow" Property="Data" Value="F1 M 0,2.5 L 2.5,0 L 5,2.5 Z" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
            
    
    
    <!-- Custom Window Style -->
<Style x:Key="CustomWindowStyle" TargetType="Window">
    <Setter Property="WindowStyle" Value="None"/>
    <Setter Property="AllowsTransparency" Value="True"/>
    <Setter Property="Background" Value="{StaticResource PrimaryBackground}"/>
    <EventSetter Event="Loaded" Handler="Window_Loaded"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="Window">
                <ControlTemplate.Resources>
                    <Style x:Key="SystemButton" TargetType="Button">
                        <Setter Property="Width" Value="46"/>
                        <Setter Property="Height" Value="32"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Border Background="{TemplateBinding Background}">
                                        <Path Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" 
                                              Stroke="{TemplateBinding Foreground}" 
                                              StrokeThickness="1"
                                              HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource TertiaryBackground}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                    <Style x:Key="SystemButtonClose" TargetType="Button" BasedOn="{StaticResource SystemButton}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Border Background="{TemplateBinding Background}">
                                        <Path Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" 
                                              Stroke="{TemplateBinding Foreground}" 
                                              StrokeThickness="1.5"
                                              HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#C42B1C"/>
                                <Setter Property="Foreground" Value="White"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ControlTemplate.Resources>
                
                <Border BorderBrush="{StaticResource PrimaryAccentBrush}" BorderThickness="1" Background="{TemplateBinding Background}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="32"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        
                        <Border x:Name="TitleBar" Grid.Row="0" Background="{StaticResource SecondaryBackground}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                
                                <Image Grid.Column="0" Source="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" Height="16" Margin="8,0"/>
                                <TextBlock Grid.Column="1" Text="{Binding Title, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Foreground="{StaticResource TextBrush}"/>

                                <StackPanel Grid.Column="2" Orientation="Horizontal">
                                    <Button x:Name="MinimizeButton" Style="{StaticResource SystemButton}" Content="M 0 5 H 10" ToolTip="{local:Translate Window_Minimize}"/>
                                    <Button x:Name="MaximizeButton" Style="{StaticResource SystemButton}" Content="M 0 0 H 10 V 10 H 0 Z" ToolTip="{local:Translate Window_Maximize}"/>
                                    <Button x:Name="RestoreButton" Style="{StaticResource SystemButton}" Content="M 0 2 H 8 V 10 H 0 Z M 2 0 H 10 V 8 H 2 Z" Visibility="Collapsed" ToolTip="{local:Translate Window_Restore}"/>
                                    <Button x:Name="CloseButton" Style="{StaticResource SystemButtonClose}" Content="M 0 0 L 10 10 M 10 0 L 0 10" ToolTip="{local:Translate Window_Close}"/>
                                </StackPanel>
                            </Grid>
                        </Border>

                        <ContentPresenter Grid.Row="1"/>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="WindowState" Value="Maximized">
                        <Setter TargetName="MaximizeButton" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="RestoreButton" Property="Visibility" Value="Visible"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>

        <!-- Style for the Video Slider -->
        <Style x:Key="VideoSliderStyle" TargetType="{x:Type Slider}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Slider}">
                        <Grid>
                            <Border x:Name="TrackBackground" CornerRadius="1" Height="4" Background="#55FFFFFF" VerticalAlignment="Center"/>
                            <Track x:Name="PART_Track">
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Width="12" Height="12">
                                        <Thumb.Template>
                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                <Border Background="{TemplateBinding Background}" CornerRadius="6" />
                                            </ControlTemplate>
                                        </Thumb.Template>
                                    </Thumb>
                                </Track.Thumb>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton>
                                        <RepeatButton.Template>
                                            <ControlTemplate>
                                                <Border CornerRadius="1" Background="{StaticResource PrimaryAccentBrush}"/>
                                            </ControlTemplate>
                                        </RepeatButton.Template>
                                    </RepeatButton>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton>
                                        <RepeatButton.Template>
                                            <ControlTemplate>
                                                <Border Background="Transparent"/>
                                            </ControlTemplate>
                                        </RepeatButton.Template>
                                    </RepeatButton>
                                </Track.IncreaseRepeatButton>
                            </Track>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

  

  

  
        
        <!-- Global Tooltip Style -->
        <Style TargetType="ToolTip">
            <Setter Property="Background" Value="{StaticResource SecondaryBackground}"/>
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TertiaryBackground}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToolTip">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3">
                            <ContentPresenter Margin="{TemplateBinding Padding}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Template for the Wildcard Browser Window -->
        <ControlTemplate x:Key="WildcardBrowserTemplate" TargetType="ContentControl">
            <Border Background="{StaticResource PrimaryBackground}" Padding="10">
                <DockPanel>
                    <StackPanel DockPanel.Dock="Bottom" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
                        <Button Content="{local:Translate WildcardBrowser_Insert}" IsDefault="True" Command="{Binding InsertCommand}" MinWidth="80"/>
                        <Button Content="{local:Translate WildcardBrowser_Cancel}" IsCancel="True" Command="{Binding CancelCommand}" MinWidth="80" Margin="5,0,0,0"
                                Background="{StaticResource SecondaryBackground}" BorderBrush="{StaticResource TertiaryBackground}" BorderThickness="1"/>
                    </StackPanel>
                    
                    <TextBox DockPanel.Dock="Top" Text="{Binding SearchText, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,0,10"/>
                    
                    <ListBox ItemsSource="{Binding FilteredWildcards}" SelectedItem="{Binding SelectedWildcard}"
                             Background="{StaticResource SecondaryBackground}" BorderThickness="1" BorderBrush="{StaticResource TertiaryBackground}">
                        <ListBox.ItemContainerStyle>
                            <Style TargetType="ListBoxItem">
                                <EventSetter Event="MouseDoubleClick" Handler="ListBoxItem_MouseDoubleClick" />
                                <Setter Property="Padding" Value="5,3"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ListBoxItem">
                                            <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                                                <ContentPresenter/>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{StaticResource PrimaryAccentBrush}"/>
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{StaticResource TertiaryBackground}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ListBox.ItemContainerStyle>
                    </ListBox>
                </DockPanel>
            </Border>
        </ControlTemplate>

        <!-- Base Button Style -->
        <Style TargetType="Button">
            <Setter Property="Background" Value="{StaticResource PrimaryAccentBrush}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="10,5"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="3">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True"><Setter Property="Background" Value="#FF3C90D1"/></Trigger>
                <Trigger Property="IsEnabled" Value="False"><Setter Property="Opacity" Value="0.6"/></Trigger>
            </Style.Triggers>
        </Style>

        <!-- Icon Button Style -->
        <Style x:Key="IconButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="Width" Value="30"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <TextBlock Text="{TemplateBinding Content}" FontFamily="Segoe MDL2 Assets" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{TemplateBinding Foreground}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                 <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource TertiaryBackground}"/>
                 </Trigger>
                 <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{StaticResource TextSecondaryBrush}"/>
                 </Trigger>
            </Style.Triggers>
        </Style>
        
        <!-- Overlay Icon Button Style -->
        <Style x:Key="OverlayIconButton" TargetType="Button">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{StaticResource TextSecondaryBrush}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Width" Value="24"/>
            <Setter Property="Height" Value="24"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="3">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource TertiaryBackground}"/>
                    <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Global Control Styles -->
        <Style TargetType="TextBlock">
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
        
        <Style TargetType="TextBox">
            <Setter Property="Background" Value="{StaticResource SecondaryBackground}"/>
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TertiaryBackground}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="CaretBrush" Value="{StaticResource TextBrush}"/>
            <Setter Property="SelectionBrush" Value="{StaticResource PrimaryAccentBrush}"/>
        </Style>

        <Style TargetType="ComboBoxItem">
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="5"/>
            <Style.Triggers>
                <Trigger Property="IsHighlighted" Value="True"><Setter Property="Background" Value="{StaticResource PrimaryAccentBrush}"/></Trigger>
            </Style.Triggers>
        </Style>

            
        <ControlTemplate x:Key="DarkComboBoxTemplate" TargetType="ComboBox">
            <Grid>
                <ToggleButton x:Name="ToggleButton" Grid.Column="2" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{x:Null}">
                    <ToggleButton.Template>
                        <ControlTemplate TargetType="ToggleButton">
                            <Border x:Name="templateRoot" Background="{StaticResource SecondaryBackground}" BorderBrush="{StaticResource TertiaryBackground}" BorderThickness="1" SnapsToDevicePixels="true">
                                <Path x:Name="arrow" Data="F1 M 0,0 L 2.5,2.5 L 5,0 Z" Fill="{StaticResource TextBrush}" HorizontalAlignment="Right" Margin="0,0,8,0" VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true"><Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource PrimaryAccentBrush}" /></Trigger>
                                <Trigger Property="IsChecked" Value="true"><Setter TargetName="arrow" Property="Data" Value="F1 M 0,2.5 L 2.5,0 L 5,2.5 Z" /></Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </ToggleButton.Template>
                </ToggleButton>
                <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="5,3,23,3" VerticalAlignment="Center" HorizontalAlignment="Left" />
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="Slide">
                    <Border x:Name="dropDownBorder" Background="{StaticResource SecondaryBackground}" BorderBrush="{StaticResource TertiaryBackground}" BorderThickness="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding Path=ActualWidth, ElementName=ToggleButton}">
                        <ScrollViewer CanContentScroll="true">
                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </ControlTemplate>

  

        <Style TargetType="ComboBox">
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TertiaryBackground}"/>
            <Setter Property="Template" Value="{StaticResource DarkComboBoxTemplate}"/>
        </Style>

        <Style TargetType="{x:Type RadioButton}">
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Grid Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="RadioCircle" Stroke="{StaticResource TextSecondaryBrush}" StrokeThickness="1" Width="14" Height="14"/>
                            <Ellipse x:Name="RadioMark" Fill="{StaticResource PrimaryAccentBrush}" Width="8" Height="8" Visibility="Collapsed"/>
                            <ContentPresenter Grid.Column="1" Margin="5,0,0,0" RecognizesAccessKey="True" VerticalAlignment="Center"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True"><Setter TargetName="RadioMark" Property="Visibility" Value="Visible"/><Setter TargetName="RadioCircle" Property="Stroke" Value="{StaticResource PrimaryAccentBrush}"/></Trigger>
                            <Trigger Property="IsMouseOver" Value="True"><Setter TargetName="RadioCircle" Property="Stroke" Value="{StaticResource TextBrush}"/></Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Expander">
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TertiaryBackground}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Margin" Value="0,0,0,5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Expander">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" 
                                Background="{TemplateBinding Background}">
                            <DockPanel>
                                <ToggleButton DockPanel.Dock="Top" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}">
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="ToggleButton">
                                            <!-- And the ToggleButton's background is transparent so the parent color shows through -->
                                            <Border Padding="8" Background="Transparent">
                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition Width="*"/>
                                                    </Grid.ColumnDefinitions>
                                                    <TextBlock x:Name="Arrow" Grid.Column="0" Text="&#xE76C;" FontFamily="Segoe MDL2 Assets" VerticalAlignment="Center"/>
                                                    <ContentPresenter Grid.Column="1" Margin="5,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"/>
                                                </Grid>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsChecked" Value="True"><Setter TargetName="Arrow" Property="Text" Value="&#xE70D;"/></Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                </ToggleButton>
                                <ContentPresenter x:Name="ContentSite" DockPanel.Dock="Bottom" Visibility="Collapsed" Margin="8"/>
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="True"><Setter TargetName="ContentSite" Property="Visibility" Value="Visible"/></Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!-- Input Field MVVM Templates -->
        
        <DataTemplate x:Key="TextTemplate" DataType="{x:Type local:TextFieldViewModel}">
            <TextBox Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                     AcceptsReturn="True" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto" MaxHeight="100" />
        </DataTemplate>

        <DataTemplate x:Key="AnyTypeTemplate" DataType="{x:Type local:TextFieldViewModel}">
            <TextBox Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                     AcceptsReturn="True" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto" MaxHeight="100"
                     AllowDrop="True"
                     PreviewDragOver="TextBox_PreviewDragOver"
                     Drop="TextBox_Drop"
                     PreviewKeyDown="TextBox_PreviewKeyDown"/>
        </DataTemplate>

        <DataTemplate x:Key="WildcardTemplate" DataType="{x:Type local:TextFieldViewModel}">
            <Grid>
                <TextBox Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                         AcceptsReturn="True" TextWrapping="Wrap" Padding="5,5,28,5"
                         VerticalScrollBarVisibility="Auto" MaxHeight="100"/>
                <Button Content="..." Style="{StaticResource OverlayIconButton}"
                        HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,4,0"
                        ToolTip="{local:Translate Wildcard_Browse}"
                        Command="{Binding DataContext.OpenWildcardBrowserCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                        CommandParameter="{Binding}"/>
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="SliderTemplate" DataType="{x:Type local:SliderFieldViewModel}">
            <StackPanel Orientation="Horizontal">
                <Slider Value="{Binding Value, Mode=TwoWay}"
                        Minimum="{Binding MinValue}" Maximum="{Binding MaxValue}" SmallChange="{Binding StepValue}"
                        MinWidth="150" Margin="0,0,5,0" VerticalAlignment="Center"
                        IsMoveToPointEnabled="True" />
                <TextBlock Text="{Binding FormattedValue}" MinWidth="50" VerticalAlignment="Center" />
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Key="ComboBoxTemplate" DataType="{x:Type local:ComboBoxFieldViewModel}">
            <local:FilterableComboBox ItemsSource="{Binding ItemsSource}"
                                      SelectedItem="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                      PlaceholderText="{local:Translate ComboBox_PlaceholderDefault}" />
        </DataTemplate>

        <DataTemplate x:Key="CheckBoxTemplate" DataType="{x:Type local:CheckBoxFieldViewModel}">
            <CheckBox IsChecked="{Binding IsChecked, Mode=TwoWay}" VerticalAlignment="Center" />
        </DataTemplate>
        
        <Style x:Key="LockToggleButtonStyle" TargetType="ToggleButton">
            <Setter Property="Width" Value="24"/>
            <Setter Property="Height" Value="24"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Foreground" Value="{StaticResource TextSecondaryBrush}"/>
            <Setter Property="Content" Value="🔓"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border Background="{TemplateBinding Background}">
                            <TextBlock Text="{TemplateBinding Content}" 
                                       Foreground="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}, FallbackValue={StaticResource TextSecondaryBrush}}" 
                                       HorizontalAlignment="Center" 
                                       VerticalAlignment="Center" 
                                       FontFamily="Segoe UI Symbol"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Foreground" Value="{StaticResource ErrorBrush}"/>
                    <Setter Property="Content" Value="🔒"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Opacity" Value="0.7"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <DataTemplate x:Key="SeedTemplate" DataType="{x:Type local:SeedFieldViewModel}">
            <Grid>
                <TextBox Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                         Padding="5,5,28,5" />
                <ToggleButton IsChecked="{Binding IsLocked, Mode=TwoWay}"
                              Style="{StaticResource LockToggleButtonStyle}"
                              HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,4,0"/>
            </Grid>
        </DataTemplate>
        
        <DataTemplate x:Key="InpaintTemplate" DataType="{x:Type local:InpaintFieldViewModel}">
            <ContentControl Content="{Binding Editor}" Margin="0,5"/>
        </DataTemplate>

        <local:FieldTemplateSelector x:Key="FieldTemplateSelector"
                                     TextTemplate="{StaticResource TextTemplate}"
                                     SeedTemplate="{StaticResource SeedTemplate}"
                                     SliderTemplate="{StaticResource SliderTemplate}"
                                     ComboBoxTemplate="{StaticResource ComboBoxTemplate}"
                                     CheckBoxTemplate="{StaticResource CheckBoxTemplate}"
                                     WildcardTemplate="{StaticResource WildcardTemplate}"
                                     AnyTypeTemplate="{StaticResource AnyTypeTemplate}" 
                                     InpaintTemplate="{StaticResource InpaintTemplate}"
        />

    </Application.Resources>
</Application>